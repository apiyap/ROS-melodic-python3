diff -ruN ros_org_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp ros_catkin_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp
--- ros_org_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp	2020-05-19 08:13:26.000000000 +0700
+++ ros_catkin_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp	2020-06-03 15:24:13.498224151 +0700
@@ -41,6 +41,9 @@
 #include <sensor_msgs/CameraInfo.h>
 #include <camera_info_manager/camera_info_manager.h>
 #include <opencv2/highgui/highgui.hpp>
+#include <opencv2/imgcodecs.hpp>
+#include <opencv2/videoio.hpp>
+
 #include <dynamic_reconfigure/server.h>
 #include <boost/assign.hpp>
 using namespace boost::assign;
@@ -95,7 +98,11 @@
     {
       if ( cap_.isOpened() ) {
         if ( ! cap_.read(image_) ) {
+#if CV_MAJOR_VERSION > 3
+          cap_.set(cv::CAP_PROP_POS_FRAMES, 0);
+#else
           cap_.set(CV_CAP_PROP_POS_FRAMES, 0);
+#endif
         }
       }
       if (flip_image_)
@@ -136,7 +143,11 @@
     nh_.param("filename", filename_, std::string(""));
     NODELET_INFO("File name for publishing image is : %s", filename_.c_str());
     try {
+#if CV_MAJOR_VERSION > 3      
+      image_ = cv::imread(filename_, cv::IMREAD_COLOR);
+#else
       image_ = cv::imread(filename_, CV_LOAD_IMAGE_COLOR);
+#endif
       if ( image_.empty() ) { // if filename is motion file or device file
         try {  // if filename is number
           int num = boost::lexical_cast<int>(filename_);//num is 1234798797
@@ -146,7 +157,11 @@
         }
         CV_Assert(cap_.isOpened());
         cap_.read(image_);
+#if CV_MAJOR_VERSION > 3         
+        cap_.set(cv::CAP_PROP_POS_FRAMES, 0);
+#else
         cap_.set(CV_CAP_PROP_POS_FRAMES, 0);
+#endif
       }
       CV_Assert(!image_.empty());
     }
