diff -ruN '--exclude=*.pyc' ros_org_ws/src/gazebo_ros_pkgs/gazebo_plugins/src/gazebo_ros_prosilica.cpp ros_catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/src/gazebo_ros_prosilica.cpp
--- ros_org_ws/src/gazebo_ros_pkgs/gazebo_plugins/src/gazebo_ros_prosilica.cpp	2020-05-02 02:19:47.000000000 +0700
+++ ros_catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/src/gazebo_ros_prosilica.cpp	2020-06-04 19:33:43.200431253 +0700
@@ -44,10 +44,9 @@
 #include <diagnostic_updater/diagnostic_updater.h>
 #include <sensor_msgs/RegionOfInterest.h>
 
-#include <opencv/cv.h>
-#include <opencv/highgui.h>
-
-#include <opencv/cvwimage.h>
+#include <opencv2/opencv.hpp>
+#include <opencv2/highgui/highgui.hpp>
+#include <opencv2/imgcodecs.hpp>
 
 #include <boost/scoped_ptr.hpp>
 #include <boost/bind.hpp>
diff -ruN '--exclude=*.pyc' ros_org_ws/src/image_pipeline/image_publisher/CMakeLists.txt ros_catkin_ws/src/image_pipeline/image_publisher/CMakeLists.txt
--- ros_org_ws/src/image_pipeline/image_publisher/CMakeLists.txt	2020-05-19 08:13:26.000000000 +0700
+++ ros_catkin_ws/src/image_pipeline/image_publisher/CMakeLists.txt	2020-06-04 13:49:48.810725641 +0700
@@ -4,13 +4,13 @@
 find_package(catkin REQUIRED COMPONENTS cv_bridge dynamic_reconfigure camera_info_manager sensor_msgs image_transport nodelet roscpp)
 
 set(opencv_2_components core highgui)
-set(opencv_3_components core imgcodecs videoio)
+set(opencv_components core imgcodecs videoio)
 find_package(OpenCV REQUIRED COMPONENTS core)
 message(STATUS "opencv version ${OpenCV_VERSION}")
 if(OpenCV_VERSION VERSION_LESS "3.0.0")
   find_package(OpenCV 2 REQUIRED COMPONENTS ${opencv_2_components})  
 else()
-  find_package(OpenCV 3 REQUIRED COMPONENTS ${opencv_3_components})  
+  find_package(OpenCV REQUIRED COMPONENTS ${opencv_components})  
 endif()
 
 # generate the dynamic_reconfigure config file
diff -ruN '--exclude=*.pyc' ros_org_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp ros_catkin_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp
--- ros_org_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp	2020-05-19 08:13:26.000000000 +0700
+++ ros_catkin_ws/src/image_pipeline/image_publisher/src/nodelet/image_publisher_nodelet.cpp	2020-06-04 13:49:48.814725760 +0700
@@ -41,6 +41,9 @@
 #include <sensor_msgs/CameraInfo.h>
 #include <camera_info_manager/camera_info_manager.h>
 #include <opencv2/highgui/highgui.hpp>
+#include <opencv2/imgcodecs.hpp>
+#include <opencv2/videoio.hpp>
+
 #include <dynamic_reconfigure/server.h>
 #include <boost/assign.hpp>
 using namespace boost::assign;
@@ -95,7 +98,11 @@
     {
       if ( cap_.isOpened() ) {
         if ( ! cap_.read(image_) ) {
+#if CV_MAJOR_VERSION > 3
+          cap_.set(cv::CAP_PROP_POS_FRAMES, 0);
+#else
           cap_.set(CV_CAP_PROP_POS_FRAMES, 0);
+#endif
         }
       }
       if (flip_image_)
@@ -136,7 +143,11 @@
     nh_.param("filename", filename_, std::string(""));
     NODELET_INFO("File name for publishing image is : %s", filename_.c_str());
     try {
+#if CV_MAJOR_VERSION > 3      
+      image_ = cv::imread(filename_, cv::IMREAD_COLOR);
+#else
       image_ = cv::imread(filename_, CV_LOAD_IMAGE_COLOR);
+#endif
       if ( image_.empty() ) { // if filename is motion file or device file
         try {  // if filename is number
           int num = boost::lexical_cast<int>(filename_);//num is 1234798797
@@ -146,7 +157,11 @@
         }
         CV_Assert(cap_.isOpened());
         cap_.read(image_);
+#if CV_MAJOR_VERSION > 3         
+        cap_.set(cv::CAP_PROP_POS_FRAMES, 0);
+#else
         cap_.set(CV_CAP_PROP_POS_FRAMES, 0);
+#endif
       }
       CV_Assert(!image_.empty());
     }
diff -ruN '--exclude=*.pyc' ros_org_ws/src/image_transport_plugins/compressed_depth_image_transport/src/codec.cpp ros_catkin_ws/src/image_transport_plugins/compressed_depth_image_transport/src/codec.cpp
--- ros_org_ws/src/image_transport_plugins/compressed_depth_image_transport/src/codec.cpp	2018-05-10 20:55:27.000000000 +0700
+++ ros_catkin_ws/src/image_transport_plugins/compressed_depth_image_transport/src/codec.cpp	2020-06-04 13:49:48.818725879 +0700
@@ -39,15 +39,16 @@
 
 #include <opencv2/highgui/highgui.hpp>
 
+
 #include "cv_bridge/cv_bridge.h"
 #include "compressed_depth_image_transport/codec.h"
 #include "compressed_depth_image_transport/compression_common.h"
 #include "ros/ros.h"
 
 // If OpenCV3
-#ifndef CV_VERSION_EPOCH
+//#ifndef CV_VERSION_EPOCH
 #include <opencv2/imgcodecs.hpp>
-#endif
+//#endif
 
 namespace enc = sensor_msgs::image_encodings;
 using namespace cv;
@@ -135,7 +136,11 @@
       // Decode raw image
       try
       {
+        #if CV_MAJOR_VERSION > 3
+        cv_ptr->image = cv::imdecode(imageData, IMREAD_UNCHANGED);
+        #else
         cv_ptr->image = cv::imdecode(imageData, CV_LOAD_IMAGE_UNCHANGED);
+        #endif
       }
       catch (cv::Exception& e)
       {
diff -ruN '--exclude=*.pyc' ros_org_ws/src/image_transport_plugins/compressed_image_transport/src/compressed_publisher.cpp ros_catkin_ws/src/image_transport_plugins/compressed_image_transport/src/compressed_publisher.cpp
--- ros_org_ws/src/image_transport_plugins/compressed_image_transport/src/compressed_publisher.cpp	2018-05-10 20:55:24.000000000 +0700
+++ ros_catkin_ws/src/image_transport_plugins/compressed_image_transport/src/compressed_publisher.cpp	2020-06-04 13:49:48.822725997 +0700
@@ -37,7 +37,9 @@
 #include <sensor_msgs/image_encodings.h>
 #include <opencv2/highgui/highgui.hpp>
 #include <boost/make_shared.hpp>
-
+#if CV_MAJOR_VERSION > 3
+#include <opencv2/imgcodecs.hpp>
+#endif
 #include "compressed_image_transport/compression_common.h"
 
 #include <vector>
@@ -97,7 +99,11 @@
     // JPEG Compression
     case JPEG:
     {
+      #if CV_MAJOR_VERSION > 3
+      params[0] = IMWRITE_JPEG_QUALITY;
+      #else
       params[0] = CV_IMWRITE_JPEG_QUALITY;
+      #endif
       params[1] = config_.jpeg_quality;
 
       // Update ros message format header
@@ -154,7 +160,11 @@
       // PNG Compression
     case PNG:
     {
+      #if CV_MAJOR_VERSION > 3
+      params[0] = IMWRITE_PNG_COMPRESSION;
+      #else
       params[0] = CV_IMWRITE_PNG_COMPRESSION;
+      #endif
       params[1] = config_.png_level;
 
       // Update ros message format header
diff -ruN '--exclude=*.pyc' ros_org_ws/src/stage/config.h ros_catkin_ws/src/stage/config.h
--- ros_org_ws/src/stage/config.h	1970-01-01 07:00:00.000000000 +0700
+++ ros_catkin_ws/src/stage/config.h	2020-06-04 16:12:53.204935798 +0700
@@ -0,0 +1,13 @@
+#ifndef _CONFIG_H
+#define _CONFIG_H
+
+#define PROJECT "Stage"
+#define VERSION "4.3.0"
+#define FULL_VERSION 4-3-0
+#define APIVERSION "4.3"
+#define INSTALL_PREFIX "/home/piya/ros_catkin_ws/devel_isolated/stage"
+#define PLUGIN_PATH "/home/piya/ros_catkin_ws/devel_isolated/stage/lib/Stage-4.3"
+
+/* #undef BUILD_GUI */
+
+#endif
diff -ruN '--exclude=*.pyc' ros_org_ws/src/vision_opencv/cv_bridge/CMakeLists.txt ros_catkin_ws/src/vision_opencv/cv_bridge/CMakeLists.txt
--- ros_org_ws/src/vision_opencv/cv_bridge/CMakeLists.txt	2018-05-01 00:54:22.000000000 +0700
+++ ros_catkin_ws/src/vision_opencv/cv_bridge/CMakeLists.txt	2020-06-04 13:49:48.798725285 +0700
@@ -13,7 +13,8 @@
 else()
 find_package(Boost REQUIRED)
 endif()
-find_package(OpenCV 3 REQUIRED
+
+find_package(OpenCV REQUIRED
   COMPONENTS
     opencv_core
     opencv_imgproc
diff -ruN '--exclude=*.pyc' ros_org_ws/src/vision_opencv/cv_bridge/src/CMakeLists.txt ros_catkin_ws/src/vision_opencv/cv_bridge/src/CMakeLists.txt
--- ros_org_ws/src/vision_opencv/cv_bridge/src/CMakeLists.txt	2018-05-01 00:54:22.000000000 +0700
+++ ros_catkin_ws/src/vision_opencv/cv_bridge/src/CMakeLists.txt	2020-06-04 13:49:48.802725403 +0700
@@ -32,11 +32,7 @@
   add_definitions(-DPYTHON3)
 endif()
 
-if (OpenCV_VERSION_MAJOR VERSION_EQUAL 3)
-add_library(${PROJECT_NAME}_boost module.cpp module_opencv3.cpp)
-else()
-add_library(${PROJECT_NAME}_boost module.cpp module_opencv2.cpp)
-endif()
+add_library(${PROJECT_NAME}_boost module.cpp module_opencv.cpp)
 target_link_libraries(${PROJECT_NAME}_boost ${Boost_LIBRARIES}
                                             ${catkin_LIBRARIES}
                                             ${PYTHON_LIBRARIES}
diff -ruN '--exclude=*.pyc' ros_org_ws/src/vision_opencv/cv_bridge/src/module_opencv2.cpp ros_catkin_ws/src/vision_opencv/cv_bridge/src/module_opencv2.cpp
--- ros_org_ws/src/vision_opencv/cv_bridge/src/module_opencv2.cpp	2018-05-01 00:54:22.000000000 +0700
+++ ros_catkin_ws/src/vision_opencv/cv_bridge/src/module_opencv2.cpp	1970-01-01 07:00:00.000000000 +0700
@@ -1,262 +0,0 @@
-/*********************************************************************
-* Software License Agreement (BSD License)
-*
-*  Copyright (c) 2012, Willow Garage, Inc.
-*  All rights reserved.
-*
-*  Redistribution and use in source and binary forms, with or without
-*  modification, are permitted provided that the following conditions
-*  are met:
-*
-*   * Redistributions of source code must retain the above copyright
-*     notice, this list of conditions and the following disclaimer.
-*   * Redistributions in binary form must reproduce the above
-*     copyright notice, this list of conditions and the following
-*     disclaimer in the documentation and/or other materials provided
-*     with the distribution.
-*   * Neither the name of the Willow Garage nor the names of its
-*     contributors may be used to endorse or promote products derived
-*     from this software without specific prior written permission.
-*
-*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-*  POSSIBILITY OF SUCH DAMAGE.
-*********************************************************************/
-
-#include "module.hpp"
-
-using namespace cv;
-
-// These are sucky, sketchy versions of the real things in OpenCV Python,
-// inferior in every way.
-
-static int failmsg(const char *fmt, ...)
-{
-  char str[1000];
-
-  va_list ap;
-  va_start(ap, fmt);
-  vsnprintf(str, sizeof(str), fmt, ap);
-  va_end(ap);
-
-  PyErr_SetString(PyExc_TypeError, str);
-  return 0;
-}
-
-static PyObject* opencv_error = 0;
-
-class PyAllowThreads
-{
-public:
-    PyAllowThreads() : _state(PyEval_SaveThread()) {}
-    ~PyAllowThreads()
-    {
-        PyEval_RestoreThread(_state);
-    }
-private:
-    PyThreadState* _state;
-};
-
-#define ERRWRAP2(expr) \
-try \
-{ \
-    PyAllowThreads allowThreads; \
-    expr; \
-} \
-catch (const cv::Exception &e) \
-{ \
-    PyErr_SetString(opencv_error, e.what()); \
-    return 0; \
-}
-
-// Taken from http://stackoverflow.com/questions/19136944/call-c-opencv-functions-from-python-send-a-cv-mat-to-c-dll-which-is-usi
-
-
-static size_t REFCOUNT_OFFSET = ( size_t )&((( PyObject* )0)->ob_refcnt ) +
-( 0x12345678 != *( const size_t* )"\x78\x56\x34\x12\0\0\0\0\0" )*sizeof( int );
-
-
-static inline PyObject* pyObjectFromRefcount( const int* refcount )
-{
-return ( PyObject* )(( size_t )refcount - REFCOUNT_OFFSET );
-}
-
-static inline int* refcountFromPyObject( const PyObject* obj )
-{
-return ( int* )(( size_t )obj + REFCOUNT_OFFSET );
-}
-
-class NumpyAllocator : public cv::MatAllocator
-{
-public:
-NumpyAllocator( ) { }
-~NumpyAllocator( ) { }
-
-void allocate( int dims, const int* sizes, int type, int*& refcount,
-uchar*& datastart, uchar*& data, size_t* step );
-
-void deallocate( int* refcount, uchar* datastart, uchar* data );
-};
-
-void NumpyAllocator::allocate( int dims, const int* sizes, int type, int*& refcount, uchar*& datastart, uchar*& data, size_t* step )
-{
-    int depth = CV_MAT_DEPTH( type );
-    int cn = CV_MAT_CN( type );
-    const int f = ( int )( sizeof( size_t )/8 );
-    int typenum = depth == CV_8U ? NPY_UBYTE : depth == CV_8S ? NPY_BYTE :
-                  depth == CV_16U ? NPY_USHORT : depth == CV_16S ? NPY_SHORT :
-                  depth == CV_32S ? NPY_INT : depth == CV_32F ? NPY_FLOAT :
-                  depth == CV_64F ? NPY_DOUBLE : f*NPY_ULONGLONG + (f^1)*NPY_UINT;
-    int i;
-    npy_intp _sizes[CV_MAX_DIM+1];
-    for( i = 0; i < dims; i++ )
-        _sizes[i] = sizes[i];
-    if( cn > 1 )
-    {
-    /*if( _sizes[dims-1] == 1 )
-         _sizes[dims-1] = cn;
-    else*/
-        _sizes[dims++] = cn;
-    }
-    PyObject* o = PyArray_SimpleNew( dims, _sizes, typenum );
-    if( !o )
-    CV_Error_(CV_StsError, ("The numpy array of typenum=%d, ndims=%d can not be created", typenum, dims));
-    refcount = refcountFromPyObject(o);
-    npy_intp* _strides = PyArray_STRIDES((PyArrayObject*) o);
-    for( i = 0; i < dims - (cn > 1); i++ )
-        step[i] = (size_t)_strides[i];
-    datastart = data = (uchar*)PyArray_DATA((PyArrayObject*)o);
-
-}
-
-void NumpyAllocator::deallocate( int* refcount, uchar* datastart, uchar* data )
-{
-    if( !refcount )
-       return;
-    PyObject* o = pyObjectFromRefcount(refcount);
-    Py_INCREF(o);
-    Py_DECREF(o);
-}
-
-// Declare the object
-NumpyAllocator g_numpyAllocator;
-
-int convert_to_CvMat2(const PyObject* o, cv::Mat& m)
-{
-    // to avoid PyArray_Check() to crash even with valid array
-    do_numpy_import();
-
-    if(!o || o == Py_None)
-    {
-        if( !m.data )
-            m.allocator = &g_numpyAllocator;
-        return true;
-    }
-
-    if( !PyArray_Check(o) )
-    {
-        failmsg("Not a numpy array");
-        return false;
-    }
-
-    // NPY_LONG (64 bit) is converted to CV_32S (32 bit)
-    int typenum = PyArray_TYPE((PyArrayObject*) o);
-    int type = typenum == NPY_UBYTE ? CV_8U : typenum == NPY_BYTE ? CV_8S :
-        typenum == NPY_USHORT ? CV_16U : typenum == NPY_SHORT ? CV_16S :
-        typenum == NPY_INT || typenum == NPY_LONG ? CV_32S :
-        typenum == NPY_FLOAT ? CV_32F :
-        typenum == NPY_DOUBLE ? CV_64F : -1;
-
-    if( type < 0 )
-    {
-        failmsg("data type = %d is not supported", typenum);
-        return false;
-    }
-
-    int ndims = PyArray_NDIM((PyArrayObject*) o);
-    if(ndims >= CV_MAX_DIM)
-    {
-        failmsg("dimensionality (=%d) is too high", ndims);
-        return false;
-    }
-
-    int size[CV_MAX_DIM+1];
-    size_t step[CV_MAX_DIM+1], elemsize = CV_ELEM_SIZE1(type);
-    const npy_intp* _sizes = PyArray_DIMS((PyArrayObject*) o);
-    const npy_intp* _strides = PyArray_STRIDES((PyArrayObject*) o);
-    bool transposed = false;
-
-    for(int i = 0; i < ndims; i++)
-    {
-        size[i] = (int)_sizes[i];
-        step[i] = (size_t)_strides[i];
-    }
-
-    if( ndims == 0 || step[ndims-1] > elemsize ) {
-        size[ndims] = 1;
-        step[ndims] = elemsize;
-        ndims++;
-    }
-
-    if( ndims >= 2 && step[0] < step[1] )
-    {
-        std::swap(size[0], size[1]);
-        std::swap(step[0], step[1]);
-        transposed = true;
-    }
-
-    if( ndims == 3 && size[2] <= CV_CN_MAX && step[1] == elemsize*size[2] )
-    {
-        ndims--;
-        type |= CV_MAKETYPE(0, size[2]);
-    }
-
-    if( ndims > 2 )
-    {
-        failmsg("more than 2 dimensions");
-        return false;
-    }
-
-    m = cv::Mat(ndims, size, type, PyArray_DATA((PyArrayObject*) o), step);
-
-    if( m.data )
-    {
-        m.refcount = refcountFromPyObject(o);
-        m.addref(); // protect the original numpy array from deallocation
-        // (since Mat destructor will decrement the reference counter)
-    };
-    m.allocator = &g_numpyAllocator;
-
-    if( transposed )
-    {
-        cv::Mat tmp;
-        tmp.allocator = &g_numpyAllocator;
-        transpose(m, tmp);
-        m = tmp;
-    }
-    return true;
-}
-
-PyObject* pyopencv_from(const Mat& m)
-{
-    if( !m.data )
-        Py_RETURN_NONE;
-    Mat temp, *p = (Mat*)&m;
-    if(!p->refcount || p->allocator != &g_numpyAllocator)
-    {
-        temp.allocator = &g_numpyAllocator;
-        ERRWRAP2(m.copyTo(temp));
-        p = &temp;
-    }
-    p->addref();
-    return pyObjectFromRefcount(p->refcount);
-}
diff -ruN '--exclude=*.pyc' ros_org_ws/src/vision_opencv/cv_bridge/src/module_opencv3.cpp ros_catkin_ws/src/vision_opencv/cv_bridge/src/module_opencv3.cpp
--- ros_org_ws/src/vision_opencv/cv_bridge/src/module_opencv3.cpp	2018-05-01 00:54:22.000000000 +0700
+++ ros_catkin_ws/src/vision_opencv/cv_bridge/src/module_opencv3.cpp	1970-01-01 07:00:00.000000000 +0700
@@ -1,367 +0,0 @@
-// Taken from opencv/modules/python/src2/cv2.cpp
-
-#include "module.hpp"
-
-#include "opencv2/core/types_c.h"
-
-#include "opencv2/opencv_modules.hpp"
-
-#include "pycompat.hpp"
-
-static PyObject* opencv_error = 0;
-
-static int failmsg(const char *fmt, ...)
-{
-    char str[1000];
-
-    va_list ap;
-    va_start(ap, fmt);
-    vsnprintf(str, sizeof(str), fmt, ap);
-    va_end(ap);
-
-    PyErr_SetString(PyExc_TypeError, str);
-    return 0;
-}
-
-struct ArgInfo
-{
-    const char * name;
-    bool outputarg;
-    // more fields may be added if necessary
-
-    ArgInfo(const char * name_, bool outputarg_)
-        : name(name_)
-        , outputarg(outputarg_) {}
-
-    // to match with older pyopencv_to function signature
-    operator const char *() const { return name; }
-};
-
-class PyAllowThreads
-{
-public:
-    PyAllowThreads() : _state(PyEval_SaveThread()) {}
-    ~PyAllowThreads()
-    {
-        PyEval_RestoreThread(_state);
-    }
-private:
-    PyThreadState* _state;
-};
-
-class PyEnsureGIL
-{
-public:
-    PyEnsureGIL() : _state(PyGILState_Ensure()) {}
-    ~PyEnsureGIL()
-    {
-        PyGILState_Release(_state);
-    }
-private:
-    PyGILState_STATE _state;
-};
-
-#define ERRWRAP2(expr) \
-try \
-{ \
-    PyAllowThreads allowThreads; \
-    expr; \
-} \
-catch (const cv::Exception &e) \
-{ \
-    PyErr_SetString(opencv_error, e.what()); \
-    return 0; \
-}
-
-using namespace cv;
-
-static PyObject* failmsgp(const char *fmt, ...)
-{
-  char str[1000];
-
-  va_list ap;
-  va_start(ap, fmt);
-  vsnprintf(str, sizeof(str), fmt, ap);
-  va_end(ap);
-
-  PyErr_SetString(PyExc_TypeError, str);
-  return 0;
-}
-
-class NumpyAllocator : public MatAllocator
-{
-public:
-    NumpyAllocator() { stdAllocator = Mat::getStdAllocator(); }
-    ~NumpyAllocator() {}
-
-    UMatData* allocate(PyObject* o, int dims, const int* sizes, int type, size_t* step) const
-    {
-        UMatData* u = new UMatData(this);
-        u->data = u->origdata = (uchar*)PyArray_DATA((PyArrayObject*) o);
-        npy_intp* _strides = PyArray_STRIDES((PyArrayObject*) o);
-        for( int i = 0; i < dims - 1; i++ )
-            step[i] = (size_t)_strides[i];
-        step[dims-1] = CV_ELEM_SIZE(type);
-        u->size = sizes[0]*step[0];
-        u->userdata = o;
-        return u;
-    }
-
-    UMatData* allocate(int dims0, const int* sizes, int type, void* data, size_t* step, int flags, UMatUsageFlags usageFlags) const
-    {
-        if( data != 0 )
-        {
-            CV_Error(Error::StsAssert, "The data should normally be NULL!");
-            // probably this is safe to do in such extreme case
-            return stdAllocator->allocate(dims0, sizes, type, data, step, flags, usageFlags);
-        }
-        PyEnsureGIL gil;
-
-        int depth = CV_MAT_DEPTH(type);
-        int cn = CV_MAT_CN(type);
-        const int f = (int)(sizeof(size_t)/8);
-        int typenum = depth == CV_8U ? NPY_UBYTE : depth == CV_8S ? NPY_BYTE :
-        depth == CV_16U ? NPY_USHORT : depth == CV_16S ? NPY_SHORT :
-        depth == CV_32S ? NPY_INT : depth == CV_32F ? NPY_FLOAT :
-        depth == CV_64F ? NPY_DOUBLE : f*NPY_ULONGLONG + (f^1)*NPY_UINT;
-        int i, dims = dims0;
-        cv::AutoBuffer<npy_intp> _sizes(dims + 1);
-        for( i = 0; i < dims; i++ )
-            _sizes[i] = sizes[i];
-        if( cn > 1 )
-            _sizes[dims++] = cn;
-        PyObject* o = PyArray_SimpleNew(dims, _sizes, typenum);
-        if(!o)
-            CV_Error_(Error::StsError, ("The numpy array of typenum=%d, ndims=%d can not be created", typenum, dims));
-        return allocate(o, dims0, sizes, type, step);
-    }
-
-    bool allocate(UMatData* u, int accessFlags, UMatUsageFlags usageFlags) const
-    {
-        return stdAllocator->allocate(u, accessFlags, usageFlags);
-    }
-
-    void deallocate(UMatData* u) const
-    {
-        if(u)
-        {
-            PyEnsureGIL gil;
-            PyObject* o = (PyObject*)u->userdata;
-            Py_XDECREF(o);
-            delete u;
-        }
-    }
-
-    const MatAllocator* stdAllocator;
-};
-
-NumpyAllocator g_numpyAllocator;
-
-
-template<typename T> static
-bool pyopencv_to(PyObject* obj, T& p, const char* name = "<unknown>");
-
-template<typename T> static
-PyObject* pyopencv_from(const T& src);
-
-enum { ARG_NONE = 0, ARG_MAT = 1, ARG_SCALAR = 2 };
-
-// special case, when the convertor needs full ArgInfo structure
-static bool pyopencv_to(PyObject* o, Mat& m, const ArgInfo info)
-{
-      // to avoid PyArray_Check() to crash even with valid array
-    do_numpy_import( );
-
-
-    bool allowND = true;
-    if(!o || o == Py_None)
-    {
-        if( !m.data )
-            m.allocator = &g_numpyAllocator;
-        return true;
-    }
-
-    if( PyInt_Check(o) )
-    {
-        double v[] = {(double)PyInt_AsLong((PyObject*)o), 0., 0., 0.};
-        m = Mat(4, 1, CV_64F, v).clone();
-        return true;
-    }
-    if( PyFloat_Check(o) )
-    {
-        double v[] = {PyFloat_AsDouble((PyObject*)o), 0., 0., 0.};
-        m = Mat(4, 1, CV_64F, v).clone();
-        return true;
-    }
-    if( PyTuple_Check(o) )
-    {
-        int i, sz = (int)PyTuple_Size((PyObject*)o);
-        m = Mat(sz, 1, CV_64F);
-        for( i = 0; i < sz; i++ )
-        {
-            PyObject* oi = PyTuple_GET_ITEM(o, i);
-            if( PyInt_Check(oi) )
-                m.at<double>(i) = (double)PyInt_AsLong(oi);
-            else if( PyFloat_Check(oi) )
-                m.at<double>(i) = (double)PyFloat_AsDouble(oi);
-            else
-            {
-                failmsg("%s is not a numerical tuple", info.name);
-                m.release();
-                return false;
-            }
-        }
-        return true;
-    }
-
-    if( !PyArray_Check(o) )
-    {
-        failmsg("%s is not a numpy array, neither a scalar", info.name);
-        return false;
-    }
-
-    PyArrayObject* oarr = (PyArrayObject*) o;
-
-    bool needcopy = false, needcast = false;
-    int typenum = PyArray_TYPE(oarr), new_typenum = typenum;
-    int type = typenum == NPY_UBYTE ? CV_8U :
-               typenum == NPY_BYTE ? CV_8S :
-               typenum == NPY_USHORT ? CV_16U :
-               typenum == NPY_SHORT ? CV_16S :
-               typenum == NPY_INT ? CV_32S :
-               typenum == NPY_INT32 ? CV_32S :
-               typenum == NPY_FLOAT ? CV_32F :
-               typenum == NPY_DOUBLE ? CV_64F : -1;
-
-    if( type < 0 )
-    {
-        if( typenum == NPY_INT64 || typenum == NPY_UINT64 || type == NPY_LONG )
-        {
-            needcopy = needcast = true;
-            new_typenum = NPY_INT;
-            type = CV_32S;
-        }
-        else
-        {
-            failmsg("%s data type = %d is not supported", info.name, typenum);
-            return false;
-        }
-    }
-
-#ifndef CV_MAX_DIM
-    const int CV_MAX_DIM = 32;
-#endif
-
-    int ndims = PyArray_NDIM(oarr);
-    if(ndims >= CV_MAX_DIM)
-    {
-        failmsg("%s dimensionality (=%d) is too high", info.name, ndims);
-        return false;
-    }
-
-    int size[CV_MAX_DIM+1];
-    size_t step[CV_MAX_DIM+1];
-    size_t elemsize = CV_ELEM_SIZE1(type);
-    const npy_intp* _sizes = PyArray_DIMS(oarr);
-    const npy_intp* _strides = PyArray_STRIDES(oarr);
-    bool ismultichannel = ndims == 3 && _sizes[2] <= CV_CN_MAX;
-
-    for( int i = ndims-1; i >= 0 && !needcopy; i-- )
-    {
-        // these checks handle cases of
-        //  a) multi-dimensional (ndims > 2) arrays, as well as simpler 1- and 2-dimensional cases
-        //  b) transposed arrays, where _strides[] elements go in non-descending order
-        //  c) flipped arrays, where some of _strides[] elements are negative
-        if( (i == ndims-1 && (size_t)_strides[i] != elemsize) ||
-            (i < ndims-1 && _strides[i] < _strides[i+1]) )
-            needcopy = true;
-    }
-
-    if( ismultichannel && _strides[1] != (npy_intp)elemsize*_sizes[2] )
-        needcopy = true;
-
-    if (needcopy)
-    {
-        if (info.outputarg)
-        {
-            failmsg("Layout of the output array %s is incompatible with cv::Mat (step[ndims-1] != elemsize or step[1] != elemsize*nchannels)", info.name);
-            return false;
-        }
-
-        if( needcast ) {
-            o = PyArray_Cast(oarr, new_typenum);
-            oarr = (PyArrayObject*) o;
-        }
-        else {
-            oarr = PyArray_GETCONTIGUOUS(oarr);
-            o = (PyObject*) oarr;
-        }
-
-        _strides = PyArray_STRIDES(oarr);
-    }
-
-    for(int i = 0; i < ndims; i++)
-    {
-        size[i] = (int)_sizes[i];
-        step[i] = (size_t)_strides[i];
-    }
-
-    // handle degenerate case
-    if( ndims == 0) {
-        size[ndims] = 1;
-        step[ndims] = elemsize;
-        ndims++;
-    }
-
-    if( ismultichannel )
-    {
-        ndims--;
-        type |= CV_MAKETYPE(0, size[2]);
-    }
-
-    if( ndims > 2 && !allowND )
-    {
-        failmsg("%s has more than 2 dimensions", info.name);
-        return false;
-    }
-
-    m = Mat(ndims, size, type, PyArray_DATA(oarr), step);
-    m.u = g_numpyAllocator.allocate(o, ndims, size, type, step);
-    m.addref();
-
-    if( !needcopy )
-    {
-        Py_INCREF(o);
-    }
-    m.allocator = &g_numpyAllocator;
-
-    return true;
-}
-
-template<>
-bool pyopencv_to(PyObject* o, Mat& m, const char* name)
-{
-    return pyopencv_to(o, m, ArgInfo(name, 0));
-}
-
-PyObject* pyopencv_from(const Mat& m)
-{
-    if( !m.data )
-        Py_RETURN_NONE;
-    Mat temp, *p = (Mat*)&m;
-    if(!p->u || p->allocator != &g_numpyAllocator)
-    {
-        temp.allocator = &g_numpyAllocator;
-        ERRWRAP2(m.copyTo(temp));
-        p = &temp;
-    }
-    PyObject* o = (PyObject*)p->u->userdata;
-    Py_INCREF(o);
-    return o;
-}
-
-int convert_to_CvMat2(const PyObject* o, cv::Mat& m)
-{
-    pyopencv_to(const_cast<PyObject*>(o), m, "unknown");
-    return 0;
-}
diff -ruN '--exclude=*.pyc' ros_org_ws/src/vision_opencv/cv_bridge/src/module_opencv.cpp ros_catkin_ws/src/vision_opencv/cv_bridge/src/module_opencv.cpp
--- ros_org_ws/src/vision_opencv/cv_bridge/src/module_opencv.cpp	1970-01-01 07:00:00.000000000 +0700
+++ ros_catkin_ws/src/vision_opencv/cv_bridge/src/module_opencv.cpp	2020-06-04 13:49:48.806725522 +0700
@@ -0,0 +1,387 @@
+// Taken from opencv/modules/python/src2/cv2.cpp
+
+#include "module.hpp"
+
+#include "opencv2/core/types_c.h"
+
+#include "opencv2/opencv_modules.hpp"
+
+#include "pycompat.hpp"
+
+static PyObject* opencv_error = 0;
+
+static int failmsg(const char *fmt, ...)
+{
+    char str[1000];
+
+    va_list ap;
+    va_start(ap, fmt);
+    vsnprintf(str, sizeof(str), fmt, ap);
+    va_end(ap);
+
+    PyErr_SetString(PyExc_TypeError, str);
+    return 0;
+}
+
+struct ArgInfo
+{
+    const char * name;
+    bool outputarg;
+    // more fields may be added if necessary
+
+    ArgInfo(const char * name_, bool outputarg_)
+        : name(name_)
+        , outputarg(outputarg_) {}
+
+    // to match with older pyopencv_to function signature
+    operator const char *() const { return name; }
+};
+
+class PyAllowThreads
+{
+public:
+    PyAllowThreads() : _state(PyEval_SaveThread()) {}
+    ~PyAllowThreads()
+    {
+        PyEval_RestoreThread(_state);
+    }
+private:
+    PyThreadState* _state;
+};
+
+class PyEnsureGIL
+{
+public:
+    PyEnsureGIL() : _state(PyGILState_Ensure()) {}
+    ~PyEnsureGIL()
+    {
+        PyGILState_Release(_state);
+    }
+private:
+    PyGILState_STATE _state;
+};
+
+#define ERRWRAP2(expr) \
+try \
+{ \
+    PyAllowThreads allowThreads; \
+    expr; \
+} \
+catch (const cv::Exception &e) \
+{ \
+    PyErr_SetString(opencv_error, e.what()); \
+    return 0; \
+}
+
+using namespace cv;
+
+static PyObject* failmsgp(const char *fmt, ...)
+{
+  char str[1000];
+
+  va_list ap;
+  va_start(ap, fmt);
+  vsnprintf(str, sizeof(str), fmt, ap);
+  va_end(ap);
+
+  PyErr_SetString(PyExc_TypeError, str);
+  return 0;
+}
+
+class NumpyAllocator : public MatAllocator
+{
+public:
+    NumpyAllocator() { stdAllocator = Mat::getStdAllocator(); }
+    ~NumpyAllocator() {}
+
+    UMatData* allocate(PyObject* o, int dims, const int* sizes, int type, size_t* step) const
+    {
+        UMatData* u = new UMatData(this);
+        u->data = u->origdata = (uchar*)PyArray_DATA((PyArrayObject*) o);
+        npy_intp* _strides = PyArray_STRIDES((PyArrayObject*) o);
+        for( int i = 0; i < dims - 1; i++ )
+            step[i] = (size_t)_strides[i];
+        step[dims-1] = CV_ELEM_SIZE(type);
+        u->size = sizes[0]*step[0];
+        u->userdata = o;
+        return u;
+    }
+
+#if CV_MAJOR_VERSION > 3
+    UMatData* allocate(int dims0, const int* sizes, int type, void* data, size_t* step, AccessFlag flags, UMatUsageFlags usageFlags) const CV_OVERRIDE
+#else
+    UMatData* allocate(int dims0, const int* sizes, int type, void* data, size_t* step, int flags, UMatUsageFlags usageFlags) const
+#endif
+    {
+        if( data != 0 )
+        {
+            // issue #6969: CV_Error(Error::StsAssert, "The data should normally be NULL!");
+            // probably this is safe to do in such extreme case
+            return stdAllocator->allocate(dims0, sizes, type, data, step, flags, usageFlags);
+        }
+        PyEnsureGIL gil;
+
+        int depth = CV_MAT_DEPTH(type);
+        int cn = CV_MAT_CN(type);
+        const int f = (int)(sizeof(size_t)/8);
+        int typenum = depth == CV_8U ? NPY_UBYTE : depth == CV_8S ? NPY_BYTE :
+        depth == CV_16U ? NPY_USHORT : depth == CV_16S ? NPY_SHORT :
+        depth == CV_32S ? NPY_INT : depth == CV_32F ? NPY_FLOAT :
+        depth == CV_64F ? NPY_DOUBLE : f*NPY_ULONGLONG + (f^1)*NPY_UINT;
+        int i, dims = dims0;
+        cv::AutoBuffer<npy_intp> _sizes(dims + 1);
+        for( i = 0; i < dims; i++ )
+            _sizes[i] = sizes[i];
+        if( cn > 1 )
+            _sizes[dims++] = cn;
+#if CV_MAJOR_VERSION > 3
+        PyObject* o = PyArray_SimpleNew(dims, _sizes.data(), typenum);
+#else
+        PyObject* o = PyArray_SimpleNew(dims, _sizes, typenum);
+#endif
+        if(!o)
+            CV_Error_(Error::StsError, ("The numpy array of typenum=%d, ndims=%d can not be created", typenum, dims));
+        return allocate(o, dims0, sizes, type, step);
+    }
+
+#if CV_MAJOR_VERSION > 3
+    bool allocate(UMatData* u, AccessFlag accessFlags, UMatUsageFlags usageFlags) const CV_OVERRIDE
+#else
+    bool allocate(UMatData* u, int accessFlags, UMatUsageFlags usageFlags) const
+#endif
+    {
+        return stdAllocator->allocate(u, accessFlags, usageFlags);
+    }
+
+#if CV_MAJOR_VERSION > 3
+    void deallocate(UMatData* u) const CV_OVERRIDE
+#else
+    void deallocate(UMatData* u) const
+#endif
+    {
+        if(!u)
+            return;
+        PyEnsureGIL gil;
+        CV_Assert(u->urefcount >= 0);
+        CV_Assert(u->refcount >= 0);
+        if(u->refcount == 0)
+        {
+            PyObject* o = (PyObject*)u->userdata;
+            Py_XDECREF(o);
+            delete u;
+        }
+    }
+
+    const MatAllocator* stdAllocator;
+};
+
+NumpyAllocator g_numpyAllocator;
+
+
+template<typename T> static
+bool pyopencv_to(PyObject* obj, T& p, const char* name = "<unknown>");
+
+template<typename T> static
+PyObject* pyopencv_from(const T& src);
+
+enum { ARG_NONE = 0, ARG_MAT = 1, ARG_SCALAR = 2 };
+
+// special case, when the convertor needs full ArgInfo structure
+static bool pyopencv_to(PyObject* o, Mat& m, const ArgInfo info)
+{
+      // to avoid PyArray_Check() to crash even with valid array
+    do_numpy_import( );
+
+
+    bool allowND = true;
+    if(!o || o == Py_None)
+    {
+        if( !m.data )
+            m.allocator = &g_numpyAllocator;
+        return true;
+    }
+
+    if( PyInt_Check(o) )
+    {
+        double v[] = {(double)PyInt_AsLong((PyObject*)o), 0., 0., 0.};
+        m = Mat(4, 1, CV_64F, v).clone();
+        return true;
+    }
+    if( PyFloat_Check(o) )
+    {
+        double v[] = {PyFloat_AsDouble((PyObject*)o), 0., 0., 0.};
+        m = Mat(4, 1, CV_64F, v).clone();
+        return true;
+    }
+    if( PyTuple_Check(o) )
+    {
+        int i, sz = (int)PyTuple_Size((PyObject*)o);
+        m = Mat(sz, 1, CV_64F);
+        for( i = 0; i < sz; i++ )
+        {
+            PyObject* oi = PyTuple_GET_ITEM(o, i);
+            if( PyInt_Check(oi) )
+                m.at<double>(i) = (double)PyInt_AsLong(oi);
+            else if( PyFloat_Check(oi) )
+                m.at<double>(i) = (double)PyFloat_AsDouble(oi);
+            else
+            {
+                failmsg("%s is not a numerical tuple", info.name);
+                m.release();
+                return false;
+            }
+        }
+        return true;
+    }
+
+    if( !PyArray_Check(o) )
+    {
+        failmsg("%s is not a numpy array, neither a scalar", info.name);
+        return false;
+    }
+
+    PyArrayObject* oarr = (PyArrayObject*) o;
+
+    bool needcopy = false, needcast = false;
+    int typenum = PyArray_TYPE(oarr), new_typenum = typenum;
+    int type = typenum == NPY_UBYTE ? CV_8U :
+               typenum == NPY_BYTE ? CV_8S :
+               typenum == NPY_USHORT ? CV_16U :
+               typenum == NPY_SHORT ? CV_16S :
+               typenum == NPY_INT ? CV_32S :
+               typenum == NPY_INT32 ? CV_32S :
+               typenum == NPY_FLOAT ? CV_32F :
+               typenum == NPY_DOUBLE ? CV_64F : -1;
+
+    if( type < 0 )
+    {
+        if( typenum == NPY_INT64 || typenum == NPY_UINT64 || type == NPY_LONG )
+        {
+            needcopy = needcast = true;
+            new_typenum = NPY_INT;
+            type = CV_32S;
+        }
+        else
+        {
+            failmsg("%s data type = %d is not supported", info.name, typenum);
+            return false;
+        }
+    }
+
+#ifndef CV_MAX_DIM
+    const int CV_MAX_DIM = 32;
+#endif
+
+    int ndims = PyArray_NDIM(oarr);
+    if(ndims >= CV_MAX_DIM)
+    {
+        failmsg("%s dimensionality (=%d) is too high", info.name, ndims);
+        return false;
+    }
+
+    int size[CV_MAX_DIM+1];
+    size_t step[CV_MAX_DIM+1];
+    size_t elemsize = CV_ELEM_SIZE1(type);
+    const npy_intp* _sizes = PyArray_DIMS(oarr);
+    const npy_intp* _strides = PyArray_STRIDES(oarr);
+    bool ismultichannel = ndims == 3 && _sizes[2] <= CV_CN_MAX;
+
+    for( int i = ndims-1; i >= 0 && !needcopy; i-- )
+    {
+        // these checks handle cases of
+        //  a) multi-dimensional (ndims > 2) arrays, as well as simpler 1- and 2-dimensional cases
+        //  b) transposed arrays, where _strides[] elements go in non-descending order
+        //  c) flipped arrays, where some of _strides[] elements are negative
+        if( (i == ndims-1 && (size_t)_strides[i] != elemsize) ||
+            (i < ndims-1 && _strides[i] < _strides[i+1]) )
+            needcopy = true;
+    }
+
+    if( ismultichannel && _strides[1] != (npy_intp)elemsize*_sizes[2] )
+        needcopy = true;
+
+    if (needcopy)
+    {
+        if (info.outputarg)
+        {
+            failmsg("Layout of the output array %s is incompatible with cv::Mat (step[ndims-1] != elemsize or step[1] != elemsize*nchannels)", info.name);
+            return false;
+        }
+
+        if( needcast ) {
+            o = PyArray_Cast(oarr, new_typenum);
+            oarr = (PyArrayObject*) o;
+        }
+        else {
+            oarr = PyArray_GETCONTIGUOUS(oarr);
+            o = (PyObject*) oarr;
+        }
+
+        _strides = PyArray_STRIDES(oarr);
+    }
+
+    for(int i = 0; i < ndims; i++)
+    {
+        size[i] = (int)_sizes[i];
+        step[i] = (size_t)_strides[i];
+    }
+
+    // handle degenerate case
+    if( ndims == 0) {
+        size[ndims] = 1;
+        step[ndims] = elemsize;
+        ndims++;
+    }
+
+    if( ismultichannel )
+    {
+        ndims--;
+        type |= CV_MAKETYPE(0, size[2]);
+    }
+
+    if( ndims > 2 && !allowND )
+    {
+        failmsg("%s has more than 2 dimensions", info.name);
+        return false;
+    }
+
+    m = Mat(ndims, size, type, PyArray_DATA(oarr), step);
+    m.u = g_numpyAllocator.allocate(o, ndims, size, type, step);
+    m.addref();
+
+    if( !needcopy )
+    {
+        Py_INCREF(o);
+    }
+    m.allocator = &g_numpyAllocator;
+
+    return true;
+}
+
+template<>
+bool pyopencv_to(PyObject* o, Mat& m, const char* name)
+{
+    return pyopencv_to(o, m, ArgInfo(name, 0));
+}
+
+PyObject* pyopencv_from(const Mat& m)
+{
+    if( !m.data )
+        Py_RETURN_NONE;
+    Mat temp, *p = (Mat*)&m;
+    if(!p->u || p->allocator != &g_numpyAllocator)
+    {
+        temp.allocator = &g_numpyAllocator;
+        ERRWRAP2(m.copyTo(temp));
+        p = &temp;
+    }
+    PyObject* o = (PyObject*)p->u->userdata;
+    Py_INCREF(o);
+    return o;
+}
+
+int convert_to_CvMat2(const PyObject* o, cv::Mat& m)
+{
+    pyopencv_to(const_cast<PyObject*>(o), m, "unknown");
+    return 0;
+}
